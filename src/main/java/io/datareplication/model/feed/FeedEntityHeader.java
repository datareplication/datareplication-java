package io.datareplication.model.feed;

import io.datareplication.model.HttpHeader;
import io.datareplication.model.HttpHeaders;
import io.datareplication.model.Timestamp;
import io.datareplication.model.ToHttpHeaders;
import lombok.AllArgsConstructor;
import lombok.NonNull;
import lombok.Value;

/**
 * This class represents the headers of a feed entity.
 */
@Value
@AllArgsConstructor
public class FeedEntityHeader implements ToHttpHeaders {
    /**
     * The entity's timestamp.
     */
    @NonNull Timestamp lastModified;
    /**
     * The kind of operation this entity represents.
     * @see OperationType
     */
    @NonNull OperationType operationType;
    /**
     * The entity's content ID. This is an internal ID (usually generated by the feed producer) that uniquely identifies
     * an entity within a feed.
     */
    @NonNull ContentId contentId;
    /**
     * Additional unstructured headers.
     */
    @NonNull HttpHeaders extraHeaders;

    public FeedEntityHeader(@NonNull final Timestamp lastModified,
                            @NonNull final OperationType operationType,
                            @NonNull final ContentId contentId) {
        this(lastModified, operationType, contentId, HttpHeaders.EMPTY);
    }

    @Override
    public @NonNull HttpHeaders toHttpHeaders() {
        return extraHeaders
                .update(HttpHeader.lastModified(lastModified))
                .update(HttpHeader.of(HttpHeader.CONTENT_ID, contentId.value()))
                .update(operationTypeHeader());
    }

    private HttpHeader operationTypeHeader() {
        return HttpHeader.of(HttpHeader.OPERATION_TYPE, String.format("http-equiv=%s", operationType));
    }
}
